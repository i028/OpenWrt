# 
# <https://github.com/KFERMercer/OpenWrt-CI>
#
# Copyright (C) 2019 P3TERX
#
# Copyright (C) 2020 KFERMercer
#
name: Wa

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'true'
  
#  schedule:
#    - cron: 0 20 * * *
#  release:
#    types: [published]

jobs:

  build:

    name: Build Wa

    runs-on: ubuntu-latest

    if: github.event.repository.owner.id == github.event.sender.id

    steps:

      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: main

      - name: Space Clean
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          ( sudo -E apt-get -qq purge azure-cli ghc* zulu* hhvm llvm* firefox powershell openjdk* dotnet* google* mysql* php* android*
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install sudo apt-get -y install build-essential rename asciidoc binutils bzip2 curl gawk gettext git libncurses5-dev libz-dev patch python3.5 python2.7 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler g++-multilib antlr3 gperf
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean ) &
          sudo timedatectl set-timezone "Asia/Shanghai"

          df -h

      - name: Update Feeds
        run: |
          sed -i 's/#src-git helloworld/src-git helloworld/g' ./feeds.conf.default
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          
      - name: SSH => Actions
        uses: P3TERX/ssh2actions@v1.0.0
        if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
        env:
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

      - name: Make Download
        run: |
          make defconfig
          make download -j8
          find dl -size -1024c -exec rm -f {} \;

      - name: Compile Firmware
        run: |
          echo -e "$(($(nproc)+1)) Th compile"
          make -j$(($(nproc)+1)) || make -j1 V=s
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="
          du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
          du -h --max-depth=1 ./build_dir
          du -h --max-depth=1 ./bin
          echo "iDate=$(date +"%y.%m-%d%H%M")" >> $GITHUB_ENV
          echo "iTAG=${{ github.event.repository.name }}-$(date +"%y.%m-%d%H%M")" >> $GITHUB_ENV

      - name: Prepare Artifact
        run: |
          mkdir -p ./artifact/firmware
          mkdir -p ./artifact/package
          mkdir -p ./artifact/buildinfo
          rm -rf $(find ./bin/targets/ -type d -name "packages")
          cp -rf $(find ./bin/targets/ -type f) ./artifact/firmware/
          cp -rf $(find ./bin/packages/ -type f -name "*.ipk") ./artifact/package/
          cp -rf $(find ./bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ./artifact/buildinfo/
          cd ./artifact/firmware
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV

      - name: Deliver BuildInfo
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.iTAG }}-BuildInfo
          path: ./artifact/buildinfo/

      - name: Deliver Package
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.iTAG }}-Package
          path: ./artifact/package/

      - name: Deliver Firmware
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.iTAG }}-Firmware
          path: ./bin/targets/
  
      - name: Upload WeTransfer
        continue-on-error: true
        run: |
          curl -fsSL git.io/file-transfer | sh
          wetrans=$(./transfer wet -s -p 16 --no-progress ${FIRMWARE})
          wetrans=$(echo $wetrans | grep -o -E "https[^ ]*")
          echo "WETRANS=$wetrans" >> $GITHUB_ENV
          echo "Download Link: $wetrans"
          
      - name: Create Release
        id: tag
        continue-on-error: true
        run: |
          echo -e "加速下载:\n" >> release.txt
          [ ${{ env.WETRANS }} ] && echo -e "[WeTransfer] (${{ env.WETRANS }} )\n" >> release.txt
          [ ${{ env.NOTICE }} ] && echo -e "${{ env.NOTICE }}" >> release.txt || true
          
      - name: Upload Release
        uses: softprops/action-gh-release@v1
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
        with:
          name: Wa-${{ env.iDate }}
          tag_name: Wa-${{ env.iDate }}
          files: ./artifact/firmware/*
          body_path: release.txt
